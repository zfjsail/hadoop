package InvertedIndex;

//import java.io.BufferedReader;
//import java.io.FileReader;
import java.io.IOException;
//import java.net.URL;
import java.util.*;

import org.apache.hadoop.io.FloatWritable;

//import javax.print.DocFlavor.URL;

//import org.apache.hadoop.conf.Configuration;
//import org.apache.hadoop.fs.LocalFileSystem;
//import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
//import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
//import org.apache.hadoop.mapreduce.filecache.DistributedCache;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;

//@SuppressWarnings("deprecation")
public class InvertedIndexMapper extends
		Mapper<Object, Text, FloatWritable, Text> {
	
	//private Set<String> stopwords;
	//private Path[] localFiles;

	@Override
	public void map(Object key, Text value, Context context)
			throws IOException, InterruptedException {
		FileSplit fileSplit = (FileSplit)context.getInputSplit();
		String fileName = fileSplit.getPath().getName();
		fileName = fileName.substring(0, fileName.indexOf("txt")-1);
		String temp = new String();
		String line = value.toString().toLowerCase();
		StringTokenizer itr = new StringTokenizer(line);
		for(; itr.hasMoreTokens();) {
			temp = itr.nextToken();
			// if(!stopwords.contains(temp)) {
				Text word = new Text();
				word.set(temp + "#" + fileName);
				context.write(word, new IntWritable(1));
			// }
		}
	}

	//@SuppressWarnings("deprecation")
	/* 
	@Override
	protected void setup(Context context) throws IOException, InterruptedException {
		Configuration conf = context.getConfiguration();
		
		stopwords = new TreeSet<String>();
		localFiles = DistributedCache.getLocalCacheFiles(conf);
		for(int i = 0; i < localFiles.length; i++) {
			String line;
			BufferedReader br = new BufferedReader(new FileReader(localFiles[i].toString()));
			while((line = br.readLine()) != null) {
				StringTokenizer itr = new StringTokenizer(line);
				while(itr.hasMoreTokens()) {
					stopwords.add(itr.nextToken());
				}
			}
		}
		
	}
	*/
}